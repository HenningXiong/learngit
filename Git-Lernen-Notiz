Linus一直痛恨的CVS及SVN都是集中式的版本控制系统，而Git是分布式版本控制系统

安装:如果你碰巧用Debian或Ubuntu Linux，通过一条sudo apt-get install git就可以直接完成Git的

创建版本库，什么是版本库呢？版本库又名仓库，英文名repository，你可以简单理解成一个目录，这个目录里面的所有文件都可以被Git管理起来，每个文件的修改、删除，Git都能跟踪，以便任何时刻都可以追踪历史，或者在将来某个时刻可以“还原”
jinbing@jinbing-pc:~$ mkdir learngit
jinbing@jinbing-pc:~$ cd learngit
jinbing@jinbing-pc:~/learngit$ pwd
/home/jinbing/learngit
jinbing@jinbing-pc:~/learngit$ ^C
jinbing@jinbing-pc:~/learngit$ git init
初始化空的 Git 版本库于 /home/jinbing/learngit/.git/

前面讲了我们把文件往Git版本库里添加的时候，是分两步执行的：
第一步是用git add把文件添加进去，实际上就是把文件修改添加到暂存区；
第二步是用git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支
(所以，git add命令实际上就是把要提交的所有修改放到暂存区（Stage），然后，执行git commit就可以一次性把暂存区的所有修改提交到分支。)

git log 
git log --pretty=oneline   #用于显示文件的修改情况，并且每一个修给的版本有一个commit id.

用git回到之前的版本 
git reset --hard HEAD^
Git必须知道当前版本是哪个版本，在Git中，用HEAD表示当前版本，也就是最新的提交3628164...882e1e0（注意我的提交ID和你的肯定不一样），上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100
git reset --hard 3628164 利用commit id 回到id对应的版本。
Git提供了一个命令git reflog用来记录你的每一次命令

命令git checkout -- readme.txt意思就是，把readme.txt文件在工作区的修改全部撤销，这里有两种情况：
一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；
一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状。
总之，就是让这个文件回到最近一次git commit或git add时的状态


Git同样告诉我们，用命令git reset HEAD file可以把暂存区的修改撤销掉（unstage），重新放回工作区
git rm删掉files

远程仓库 GitHub
为什么GitHub需要SSH Key呢？因为GitHub需要识别出你推送的提交确实是你推送的，而不是别人冒充的，而Git支持SSH协议，所以，GitHub只要知道了你的公钥，就可以确认只有你自己才能推送。当然，GitHub允许你添加多个Key。假定你有若干电脑，你一会儿在公司提交，一会儿在家里提交，只要把每台电脑的Key都添加到GitHub，就可以在每台电脑上往GitHub推送了。

从远程库clone项目到本地库里
git clone git@github.com:michaelliao/gitskills.git

从本地库把项目clone到远程库中
1.先把本地库和远程库里的对应项目先关联起来                               
git remote add origin git@github.com:michaelliao/learngit.git
2.把本地库里的文件push到远程库里的相应项目里
git push -u origin master（第一次）////git push origin master

分支
分支在实际中有什么用呢？假设你准备开发一个新功能，但是需要两周才能完成，第一周你写了50%的代码，如果立刻提交，由于代码还没写完，不完整的代码库会导致别人不能干活了。如果等代码全部写完再一次提交，又存在丢失每天进度的巨大风险。
现在有了分支，就不用怕了。你创建了一个属于你自己的分支，别人看不到，还继续在原来的分支上正常工作，而你在自己的分支上干活，想提交就提交，直到开发完毕后，再一次性合并到原来的分支上，这样，既安全，又不影响别人工作。
















































